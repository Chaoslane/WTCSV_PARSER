<configuration debug="false" scan="true" scanPeriod="600 seconds">
    <!-- 下面appender表示输出到控制台 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 设置级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- level级别的日志才会被处理，其他级别不处理 -->
            <level>INFO</level>
            <!-- 用于配置符合条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- encoder指定编码格式，并根据指定的pattern输出日志信息 -->
        <encoder charset="UTF-8">
            <!-- pattern指定日志的输出格式 -->
            <pattern>%d{HH:mm:ss.SSS}[%-5level][%thread][%logger{20}]-%msg%n</pattern>
        </encoder>
    </appender>

    <!-- 下面是以滚动的方式生成日志文件 -->
    <appender name="rollingFile"
              class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 下面是设置的临界值过滤器 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 小于level级别的日志会被过滤掉 -->
            <level>INFO</level>
        </filter>

        <!-- rollingPolicy表示滚动策略，下面表示以时间来指定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 如果用TimeBasedRollingPolicy，则fileNamePattern元素必须包含，指定日志的名称 -->
            <fileNamePattern>log/INFO_log-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 文件的最大保留数，超过此数字会自动删除 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <encoder>
            <pattern>%d{HH:mm:ss.SSS}[%-5level][%thread][%logger{20}]-%msg%n</pattern>
            <!-- 是否立即清空输出流，设置为false可以提高性能，但日志可能会丢失 -->
            <immediateFlush>false</immediateFlush>
        </encoder>

    </appender>

</configuration>